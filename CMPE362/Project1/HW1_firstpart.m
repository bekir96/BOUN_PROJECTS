% Problem 1
% Using 5x2 subplot to fit all subfigures 
% belong to a single figure.

t=(-2:0.01:2); 
y1=sin(2*pi.*t);
y2=sin(2*pi*10.*t);
y3=10*sin(2*pi.*t);
y4= sin(2*pi.*t)+10;
y5= sin(2*pi.*(t- 0.5));
y6= 10*sin(2*pi*10.*t);
y7= t.*sin(2*pi.*t);
y8= sin(2*pi.*t)./t;
y9= y1+y2+y3+y4+y5+y6+y7+y8;

figure(1);
subplot(5,2,1);
plot(t,y1);
subplot(5,2,2);
plot(t,y2);
subplot(5,2,3);
plot(t,y3);
subplot(5,2,4);
plot(t,y4);
subplot(5,2,5);
plot(t,y5);
subplot(5,2,6);
plot(t,y6);
subplot(5,2,7);
plot(t,y7);
subplot(5,2,8);
plot(t,y8);
subplot(5,2,9);
plot(t,y9);



% Problem 2
% Using 5x2 subplot to fit all subfigures 
% belong to a single figure.

figure(2);
z = randn(1,401).*0.1;   % z is vector which is generated by randn with 401 random numbers.
y10 = z;
y11 = z+t;
y12 = z+y1;
y13 = z.*y1;
y14 = t.*sin(2*pi.*z);
y15 = sin(2*pi.*(t+z));
y16 = z.*y2;
y17 = sin(2*pi.*(t+10.*z));
y18 = y1./z;
y19 = y11+y12+y13+y14+y15+y16+y17+y18;
subplot(5,2,1);
plot(t,y10);
subplot(5,2,2);
plot(t,y11);
subplot(5,2,3);
plot(t,y12);
subplot(5,2,4);
plot(t,y13);
subplot(5,2,5);
plot(t,y14);
subplot(5,2,6);
plot(t,y15);
subplot(5,2,7);
plot(t,y16);
subplot(5,2,8);
plot(t,y17);
subplot(5,2,9);
plot(t,y18);
subplot(5,2,10);
plot(t,y19);



% Problem 3
% Using 5x2 subplot to fit all subfigures 
% belong to a single figure.

figure(3);
z = rand(1,401).*0.1;  % z is vector which is generated by rand with 401 random numbers.
y20 = z;
y21 = z+t;
y22 = z+y1;
y23 = z.*y1;
y24 = t.*sin(2*pi.*z);
y25 = sin(2*pi.*(t+z));
y26 = z.*y2;
y27 = sin(2*pi.*(t+10*z));
y28 = y1./z;
y29 = y21+y22+y23+y24+y25+y26+y27+y28;
subplot(5,2,1);
plot(t,y20);
subplot(5,2,2);
plot(t,y21);
subplot(5,2,3);
plot(t,y22);
subplot(5,2,4);
plot(t,y23);
subplot(5,2,5);
plot(t,y24);
subplot(5,2,6);
plot(t,y25);
subplot(5,2,7);
plot(t,y26);
subplot(5,2,8);
plot(t,y27);
subplot(5,2,9);
plot(t,y28);
subplot(5,2,10);
plot(t,y29);



% Problem 4
% Using hist to fit all subfigures 
% belong to a single figure.

figure(4);
% a is derivation 
% all r variables are format of randn(5000,1).*a
a = 1;  
r1 = randn(5000,1).*a;
subplot(2,2,1);
hist(r1);
a = sqrt(8);
r2 = a.*randn(5000,1);
subplot(2,2,2);
hist(r2);
a = 8;
r3 = a.*randn(5000,1);
subplot(2,2,3);
hist(r3);
a = 16;
r4 = a.*randn(5000,1);
subplot(2,2,4);
hist(r4);



% Problem 5
% Using hist to fit all subfigures 
% belong to a single figure.

figure(5);
% a is derivation
% b is mean
% all r variables are format of randn(5000,1).*a+b
a = 1;  
b = 10;  
r6 = randn(5000,1).*a + b;
subplot(2,2,1);
hist(r6);
a = 2;
b = 20;
r7 = a.*randn(5000,1) + b;
subplot(2,2,2);
hist(r7);
a = 1;
b = -10;
r8 = a.*randn(5000,1) + b;
subplot(2,2,3);
hist(r8);
a = 2;
b = -20;
r9 = a.*randn(5000,1) + b;
subplot(2,2,4);
hist(r9);



% Problem 6
% Using hist to fit all subfigures 
% belong to a single figure.

figure(6);
% a is lower value
% b is higher value
% all r variables are format of a+(b-a).*randn(5000,1)
a = -4;
b = 4;
r11 = a + (b-a) .* rand(5000,1);
subplot(1,2,1);
hist(r11);
a = -20;
b = 20;
r21 = a + (b-a) .* rand(1,5000);
subplot(1,2,2);
hist(r21);



% Problem 7
% By loading 'mysignal.mat', I find x-signal,
% time and frequency. Later, I use them to get
% time-signal, frequency-power diagrams.

figure(7);
load("mysignal.mat");
subplot(3,1,1)
plot(t,x)
xlabel('time')
ylabel('signal')
 
Y = fft(x);             %discrete fourier transform
 
n = length(x);          % number of samples
f = (0:n-1)*(fs/n);     % frequency range
power = abs(Y).^2/n;    % power of the DFT
subplot(3,1,2)
plot(f,power)
xlabel('Frequency')
ylabel('Power')
 
Y0 = fftshift(Y);         % shift y values
f0 = (-n/2:n/2-1)*(fs/n); % 0-centered frequency range
power0 = abs(Y0).^2/n;    % 0-centered power
 
subplot(3,1,3)
 
plot(f0,power0)
xlabel('Frequency')
ylabel('Power')



% Problem 8
% I record my favourite song 'Boris-Gravity' 
% for 5 seconds and analyze it using fft and 
% fftshift.

figure(8);
%time-signal plot
[y,fs] = audioread('cut_boris.wav'); %y=sampled data and Fs is the sampling rate
yTmp = y(:,1);
N = length(yTmp);
t = (0:N-1)/fs;
subplot(2,1,1);
plot(t,yTmp);
xlabel('time');
ylabel('signal');

%frequency-power plot
y1 = y(:,1);
Y = fft(y1);
l=length(y1);

Y0 = fftshift(Y);         % shift y values
f0 = (-l/2:l/2-1)*(fs/l); % 0-centered frequency range
power0 = abs(Y0).^2/l;    % 0-centered power

subplot(2,1,2)
plot(f0,power0)
xlabel('Frequency')
ylabel('Power')
xlim([-500 500])



% Problem 9
% First read the image, 'lena.png',
% with imread function. 
% After that, convert this rgb image into a 
% grayscale image by using rgb2gray method. 
% Then you will compute the mean, standard 
% deviation, maximum (and location of maximum), 
% minimum (and location of minimum) of the 
% matrix you obtained from the image.

figure(9);
I = imread('lena.png'); 
J = rgb2gray(I);
imshow(J);
meanIntensity = mean(mean(J));
disp(strcat('Mean of the image: ', num2str(meanIntensity)));
standardDeviation = std(double(J(:)));
disp(strcat('Standard derivation of the image: ', num2str(standardDeviation)));
minValue = min(J(:));
[rowsOfMines, colsOfMines] = find(J == minValue);
disp(strcat('Min value of the image: ', num2str(minValue)));
disp(strcat('Min value coordinate of the image: ', num2str([rowsOfMines, colsOfMines])));
maxValue = max(J(:));
[rowsOfMaxes, colsOfMaxes] = find(J == maxValue);
disp(strcat('Max value of the image: ', num2str(maxValue)));
disp(strcat('Max value coordinate of the image: ', num2str([rowsOfMaxes, colsOfMaxes])));
